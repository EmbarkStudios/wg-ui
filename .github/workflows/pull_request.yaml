name: PR
on:
  push:
    branches-ignore: master
  pull_request:
    branches:
      - master
jobs:
  review:
    name: Code Review
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: npm install and build
      run: |
        npm install --prefix ui
        npm run --prefix ui build

    - name: Get and install bindfs
      uses: "cedrickring/golang-action@1.5.2"
      with:
        args: go get -u github.com/go-bindata/go-bindata/... && go get -u github.com/elazarl/go-bindata-assetfs/... && go-bindata-assetfs -prefix ui/dist ui/dist

    - name: Check styling error
      uses: "cedrickring/golang-action@1.5.2"
      with:
        args: go get -u golang.org/x/lint/golint; golint -set_exit_status main.go server.go config.go

    - name: Check missing error check
      uses: "cedrickring/golang-action@1.5.2"
      with:
        args: go get -u github.com/kisielk/errcheck; errcheck ./...

    - name: Check suspicious constructs (1)
      uses: "cedrickring/golang-action@1.5.2"
      with:
        args: go get -u honnef.co/go/tools/cmd/staticcheck; staticcheck -checks all,-ST1003,-U1000,-ST1005 ./... # have to disable ST1003,U1000,ST1005 due to the generated code

    - name: Check suspicious constructs (2)
      uses: "cedrickring/golang-action@1.5.2"
      with:
        args: go vet ./...

    - name: Check security issues with gosec
      uses: "cedrickring/golang-action@1.5.2"
      with:
        # TODO: remove `-exclude=G110` once https://github.com/go-bindata/go-bindata/pull/50 is merged and released
        args: go get -u github.com/securego/gosec/cmd/gosec; gosec -exclude=G110 ./... # https://github.com/securego/gosec

  docker-build:
    name: Docker
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=embarkstudios/wireguard-ui
          DOCKER_PLATFORMS=linux/amd64,linux/arm64,linux/arm/v7
          VERSION=latest

          TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${VERSION} \
            ${TAGS} --file Dockerfile .
      -
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@master
      -
        name: Docker Buildx (build)
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

#  build:
#    name: Build
#    runs-on: ubuntu-20.04
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Clean out old builds from disk
#      run: |
#        df -h / && df -h /mnt
#        sudo apt-get clean -qq
#        sudo apt-get autoclean -qq
#        docker rmi $(docker image ls -aq)
#        df -h / && df -h /mnt
#
#    - name: Install buildah
#      run: |
#        sudo apt-get install -qq -y software-properties-common
#        sudo apt-get update -qq
#        sudo apt-get -qq -y install buildah
#
#    - name: Build the Docker image
#      run: buildah bud --format=docker --layers -f Dockerfile .
